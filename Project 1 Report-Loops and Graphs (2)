{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Team HKV: Michael Keller, Henry Herzfeld, Yuri Villanueva"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this report, we attempt to implement RSA in Python. While the C library NTL is preferred by many for large number operations, we chose to invesigate whether Python can achieve the same or better performance than NTL using existing libraries or packages in conjunction with those that we create. Our results will be detailed in this document, in the hopes that they can be compared with those of other groups in order to make this determination."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Naive RSA Decryption vs CRT Decryption"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we were asked to investigate the difference in performance between a naive RSA implementation and an RSA implementation that uses the Chinese Remainder Theorem. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we must perform key generation. We will create key sizes that are powers of 2 up to 8192 bits for comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from RSA import RSA\n",
    "from powmodn import rec_pow_mod_n, bit_pow_mod_n\n",
    "from util import lcm, int2string, string2int\n",
    "from math import gcd\n",
    "from rt import rt2, rt4, rt_average_2, rt_average_4, rt3\n",
    "import pandas as pd\n",
    "from tail_optimized import tail_rec_pow_mod_n\n",
    "from scipy.stats import pearsonr\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "from random import randrange"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RSA scheme using bit_pow_mod_n and rec_inverse algorithms\n",
      "RSA scheme using tail_rec_pow_mod_n and rec_inverse algorithms\n",
      "RSA scheme using powmod and rec_inverse algorithms\n"
     ]
    }
   ],
   "source": [
    "scheme1 = RSA(powmodn=bit_pow_mod_n)\n",
    "scheme2 = RSA(powmodn=tail_rec_pow_mod_n)\n",
    "scheme3 = RSA(gmp=True)\n",
    "\n",
    "schemes = [scheme1, scheme2, scheme3]\n",
    "keys=[]\n",
    "\n",
    "for scheme in schemes:\n",
    "    for i in range (7, 13):\n",
    "        key=(p, q, n, l, e, d, public_key, private_key)=scheme.generate_keys(bit_length=2**i)\n",
    "        keys.append(key)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we perform encryption with each bit size:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Original plaintext message:  The quick brown fox jumps over the lazy dog.\n"
     ]
    }
   ],
   "source": [
    "message=\"The quick brown fox jumps over the lazy dog.\"\n",
    "print(\"\\nOriginal plaintext message: \", message)\n",
    "\n",
    "m = string2int(message)\n",
    "ciphertexts=[]\n",
    "\n",
    "for i in range(0, (len(keys))//2):\n",
    "    c=scheme1.rsa_encrypt(m, key[6])\n",
    "    ciphertext=int2string(c)\n",
    "    ciphertexts.append(c)\n",
    "\n",
    "for i in range((len(keys))//2, len(keys)):\n",
    "    c=scheme2.rsa_encrypt(m, key[6])\n",
    "    ciphertext=int2string(c)\n",
    "    ciphertexts.append(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we run the our decryption algorithms with the different bit sizes and compare their running times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "bit_lengths=[2**(7+i) for i in range(0, (len(keys))//2)]\n",
    "reg_running_times_bit,CRT_running_times_bit,=[],[]\n",
    "reg_running_times_rec,CRT_running_times_rec=[],[]\n",
    "reg_running_times_gmp,CRT_running_times_gmp=[],[]\n",
    "\n",
    "for i in range(0, (len(keys))//2):\n",
    "    # Evaluating bit powmodn RSA scheme\n",
    "    running_time_avg = rt_average_2(scheme1.rsa_decrypt, ciphertexts[i], keys[i][7], 10)\n",
    "    CRT_running_time_avg = rt_average_4(scheme1.CRT_rsa_decrypt, ciphertexts[i], keys[i][7], keys[i][0], keys[i][1], 10) \n",
    "    CRT_running_times_bit.append(CRT_running_time_avg) \n",
    "    reg_running_times_bit.append(running_time_avg)\n",
    "    \n",
    "    # Evaluating recursive powmodn RSA scheme   \n",
    "    running_time_avg = rt_average_2(scheme2.rsa_decrypt, ciphertexts[i], keys[i][7], 10)\n",
    "    CRT_running_time_avg = rt_average_4(scheme2.CRT_rsa_decrypt, ciphertexts[i], keys[i][7], keys[i][0], keys[i][1], 10) \n",
    "    reg_running_times_rec.append(running_time_avg)\n",
    "    CRT_running_times_rec.append(CRT_running_time_avg)\n",
    "    \n",
    "    # Evaluating GMP-accelerated powmodn RSA scheme \n",
    "    running_time_avg = rt_average_2(scheme3.rsa_decrypt, ciphertexts[i], keys[i][7], 10)\n",
    "    CRT_running_time_avg = rt_average_4(scheme3.CRT_rsa_decrypt, ciphertexts[i], keys[i][7], keys[i][0], keys[i][1], 10) \n",
    "    CRT_running_times_gmp.append(CRT_running_time_avg) \n",
    "    reg_running_times_gmp.append(running_time_avg)\n",
    "    \n",
    "# Creating dataframes for tables\n",
    "rt_table_4=pd.DataFrame(list(zip(bit_lengths, reg_running_times_bit, CRT_running_times_bit, reg_running_times_rec, CRT_running_times_rec)), columns=['Key Size','Bitwise No CRT', 'Bitwise CRT', 'Recursive No CRT', 'Recursive CRT'])\n",
    "rt_table_5=pd.DataFrame(list(zip(bit_lengths, reg_running_times_gmp, CRT_running_times_gmp)), columns=['Key Size','GMP-Accelerated No CRT', 'GMP-Accelerated CRT'])\n",
    "rt_table_2=pd.DataFrame(list(zip(bit_lengths, reg_running_times_bit, CRT_running_times_bit)), columns=['Key Size','Bitwise No CRT', 'Bitwise CRT'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Running Time (sec)')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_4=rt_table_4.plot(x='Key Size', y=['Bitwise No CRT', 'Bitwise CRT', 'Recursive No CRT', 'Recursive CRT'], kind='line')\n",
    "ax_4.set_ylabel(\"Running Time (sec)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Running Time (sec)')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_2=rt_table_2.plot(x='Key Size', y=['Bitwise No CRT', 'Bitwise CRT'], kind='line')\n",
    "ax_2.set_ylabel(\"Running Time (sec)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Running Time (sec)')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_2=rt_table_5.plot(x='Key Size', kind='line')\n",
    "ax_2.set_ylabel(\"Running Time (sec)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Random Fault Attack"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It was also requested that we implement the random fault attack on the signature of RSA given in the following paper:\n",
    "https://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf \n",
    "\n",
    "This attack proceeds as follows:\n",
    "\n",
    "Alice asks Bob to sign a message $m$. Normally, Bob signs the message with his private key $sk$. Alice can verify this signature $s$ using the public key $pk$. It is the same as the original message $m$. \n",
    "\n",
    "The random fault attack works on the CRT implementation of RSA decryption. With CRT, RSA signing/decrypting first sends the message $m$ in $Z_n$ to the corresponding element $(u, v)$ in $Z_p x Z_q$. Exponentiation is done in $Z_p x Z_q$ where it is less computationally expensive:\n",
    "\n",
    "$$x= u^d (mod (p-1))$$\n",
    "\n",
    "$$w=v^d (mod (q-1))$$\n",
    "\n",
    "Afterwards, send $(x, w)$ in $Z_p x Z_q$ to the corresponding element in $Z_n$. This can be done using the Extended Euclidean Algorithm, where we find $r$ and $t$, the inverses of $p$ in $Z_q$, and $q$ in $Z_p$, respectively, so that:\n",
    "\n",
    "$$rpx + tqw = w (mod p) = x (mod q)$$\n",
    "\n",
    "is the corresponding element in $Z_n$. This is the signature $s = m ^ d (mod n)$.\n",
    "\n",
    "Note that $spx = 0 (mod p)$ and $tqw = 0 (mod q)$. The random fault attack can be mounted if exactly one of $w$ or $x$ can be corrupted.\n",
    "\n",
    "Suppose exactly one of $x$ or $w$ has bit errors, say $x$ becomes $x'$. Then Alice doesn't get the original message $m$ when she verifies the signature. Instead of $s^e (mod n) = m$, Alice gets: \n",
    "\n",
    "$$m' = (rpx' + tqw)^e (mod n)= (rpx')^e + (tpq)^e (mod n)$$\n",
    "\n",
    "The difference between this and $m = s^d = (rpx) ^ e + (tpq) ^ e (mod n)$ is $(rpx') ^ e - (rpx)^e (mod n)$. This difference is equivalent to $0 (mod p)$, and just as important, this difference is nonzero. That is, $m - verify(s', public_key) = 0 (mod p)$ and is nonzero. Thus, computing $gcd(n, m - verify(s' public_key))$ reveals one of the factors of n. When we introduce even a single bit error in $x$ or $w$, we don't get the original message $m$ when we verify the corrupted signature.\n",
    "\n",
    "In our implementation, the CRT_rsa_sign function has a 'feature' that lets us introduce a bit error at a random position in either $x$ or $w$. Alice won't get the original message back when she verifies $s$'. The difference between this corrupted message and the original message is equivalent to 0 modulo one of the prime factors of $n$. Alice can recover the factorization by computing the gcd. This factorization should be equal to one of the prime factors of n.\n",
    "\n",
    "To demonstrate this, we present the following code. We use 1024 bits here for ease of computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RSA scheme using bit_pow_mod_n and rec_inverse algorithms\n",
      "\n",
      "\n",
      "-------------------------------------------------------------\n",
      "\n",
      "The random fault attack:\n",
      "Generating 1024 -bit keys...\n",
      "\n",
      " Message to be signed:\n",
      "\n",
      "\t Please attach your signature.\n",
      "\n",
      " Signature creation successful!\n",
      "\n",
      " Created corrupted signature \n",
      "\n",
      "Are m and m' the same? \t False\n",
      "Is recovered_factor=p?\t False\n",
      "Is recovered_factor=q?\t True\n"
     ]
    }
   ],
   "source": [
    "scheme = RSA(powmodn=bit_pow_mod_n, sign=True)\n",
    "\n",
    "bit_length = 1024\n",
    "e = 65537\n",
    "\n",
    "print(\"\\n\\n-------------------------------------------------------------\")\n",
    "print(\"\\nThe random fault attack:\")\n",
    "print(\"Generating\", bit_length, \"-bit keys...\")\n",
    "\n",
    "(p, q, n, l, e, d, public_key, private_key) = scheme.generate_keys(bit_length, e)\n",
    "\n",
    "message = \"Please attach your signature.\"\n",
    "print(\"\\n Message to be signed:\\n\\n\\t\", message)\n",
    "m = string2int(message)\n",
    "\n",
    "s = scheme.rsa_sign(m, private_key, p, q)\n",
    "print(\"\\n Signature creation successful!\")\n",
    "\n",
    "s1 = scheme.rsa_sign(m, private_key, p, q, faulty=True)  # random bit flip\n",
    "\n",
    "print(\"\\n Created corrupted signature \\n\")\n",
    "\n",
    "m1 = scheme.rsa_verify(s1, public_key)\n",
    "\n",
    "print(\"Are m and m' the same? \\t\", m1==m)\n",
    "\n",
    "recovered_factor = gcd(n, m - m1)\n",
    "\n",
    "print(\"Is recovered_factor=p?\\t\", recovered_factor==p)\n",
    "print(\"Is recovered_factor=q?\\t\", recovered_factor==q)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We note here that $gcd(n, m - m')=p$, verifying the correctness of our fault attack implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Timing Attack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RSA scheme using bit_pow_mod_n and rec_inverse algorithms\n",
      "Pearson correlation: 0.08\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def get_ti(M, n, d):\n",
    "    t = time.time()\n",
    "\n",
    "    if d:\n",
    "        M *= M**2 % n\n",
    "\n",
    "    return M, time.time()-t\n",
    "\n",
    "bits = 16\n",
    "e = 65537\n",
    "scheme = RSA(powmodn=bit_pow_mod_n, sign=True)\n",
    "tis = []\n",
    "p, q, n, l, e, d, public_key, private_key = scheme.generate_keys(bit_length=bits)\n",
    "\n",
    "\n",
    "n_m = 16\n",
    "max_m = 2**1024\n",
    "conv = 100\n",
    "messages = [randrange(max_m) for x in range(n_m)]\n",
    "tis = []\n",
    "\n",
    "for m in messages:\n",
    "    _, t = rt4(scheme.rsa_sign, m, public_key, p, q)\n",
    "    tis.append(t*conv)\n",
    "\n",
    "nums = (2**(bits-1), (2**bits)-1)\n",
    "M = messages[0]\n",
    "num = 2**(bits-1)\n",
    "\n",
    "Tis = []\n",
    "\n",
    "for num in nums:\n",
    "    temp = []\n",
    "\n",
    "    while num:\n",
    "        d = 0\n",
    "\n",
    "        if num & 1:\n",
    "            d = 1\n",
    "\n",
    "        M, Ti = get_ti(M, n, d)\n",
    "        temp.append(Ti*conv)\n",
    "\n",
    "        num >>= 1\n",
    "\n",
    "    Tis.append(temp)\n",
    "\n",
    "\n",
    "std, _ = pearsonr(Tis[0], tis)\n",
    "print(\"Pearson correlation: {:.2f}\".format(std))\n",
    "\n",
    "\n",
    "ax1 = plt.subplot(2,1,1)\n",
    "plt.hist(Tis[0])\n",
    "plt.title('Tis')\n",
    "plt.subplot(2,1,2, sharex=ax1)\n",
    "plt.hist(tis)\n",
    "plt.title('tis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# APPENDIX"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## APPENDIX A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python is notably poor suited for the execution of recursive algorithms. Each function call, regardless of its composition, allocates a stack frame in Python. When recursing, this large number of nested stack frames dramatically increases execution. One solution for a large stack trace is to optimize for tail recursion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "@TailCaller\r\n",
      "def tail_rec_inverse_helper(r, new_r, n, t=0, new_t=1):\r\n",
      "    if new_r <= 0:\r\n",
      "        return t % n\r\n",
      "    else:\r\n",
      "        return TailCall(tail_rec_inverse_helper, new_r, r % new_r, n, new_t, t - (r // new_r) * new_t)\r\n",
      "\r\n",
      "# Multiplicative inverse of a in Z_n*\r\n",
      "def tail_rec_inverse(a, n):\r\n",
      "    if gcd(a, n) != 1:\r\n",
      "        return \"a is not invertible in Z/nZ\"\r\n",
      "    return tail_rec_inverse_helper(n, a, n)\r\n"
     ]
    }
   ],
   "source": [
    "! tail -12 tail_optimized.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above function definitions describe two functions, one of which performs recursion. The recursive function's return statement has been carefully extracted from its logic such that the call stands alone, at the tail of the recursive function. This is tail recursion. In many languages the compiler will note this tail recursion and perform tail recursion elimination. This effectively removes stack frames from the stack for each recursive call. Instead of performing a CALL/RETURN within the stack, only a JUMP is needed. \n",
    "\n",
    "Unfortunately, Python does not support tail recursion elimination explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "class TailCaller(object) :\r\n",
      "    def __init__(self, f) :\r\n",
      "        self.f = f\r\n",
      "    def __call__(self, *args, **kwargs) :\r\n",
      "        ret = self.f(*args, **kwargs)\r\n",
      "        while type(ret) is TailCall :\r\n",
      "            ret = ret.handle()\r\n",
      "        return ret\r\n",
      "\r\n",
      "class TailCall(object) :\r\n",
      "    def __init__(self, call, *args, **kwargs) :\r\n",
      "        self.call = call\r\n",
      "        self.args = args\r\n",
      "        self.kwargs = kwargs\r\n",
      "    def handle(self) :\r\n",
      "        if type(self.call) is TailCaller :\r\n",
      "            return self.call.f(*self.args, **self.kwargs)\r\n",
      "        else :\r\n",
      "            return self.call(*self.args, **self.kwargs)\r\n"
     ]
    }
   ],
   "source": [
    "! cat tailcaller.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above classes are used to emulate tail recursion elimination. By using the decorator \"@TailCaller\" on a tail optimized recursive function, we may perform tail recursion elimination within Python. Decorators are wrappers for functions which modify their behavior."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
